#!/usr/bin/env node
var fs = require('fs');
var glob = require("glob")
var mkpath = require('mkpath');

var args = process.argv.slice(2);

if (args.length < 1 || args.length > 2) {
  printUsage();
} else {
  var mapFile = args[0];
  var dest = args[1] ? args[1] : '.';
  prepareMap(mapFile, dest);
}

function printUsage() {
  console.log('Usage: prepareMap mapSourceFile [destination]');
  console.log('If you specify a destination, map.json and the associated images will be put there.');
  console.log('Otherwise, map.json will be written to the current directory.');
}

function prepareMap(mapFile, dest) {
  fs.readFile(mapFile, { encoding: 'utf8' }, function(err, data) {
    if (err) throw err;
    var mapSource = JSON.parse(data);
    var prefix = mapSource.metadata.imagePrefix || ''; 
    var suffix = mapSource.metadata.imageSuffix || ''; 
    processFiles(prefix, suffix, function(file) {
      if (dest == '.') return;
      // todo: Path handling is bad in this script - the following line is the worst offender
      var dir = file.replace(/\/[^\/]*$/, ""); 
      mkpath.sync(dest + '/' + dir);
      var source = fs.readFileSync(file);
      var target = dest + '/' + file;
      fs.writeFileSync(target, source);
    }, function(cells) {
      mapSource.cells = cells;
      var json = JSON.stringify(mapSource, null, ' ');
      var mapOutputFile = dest + '/map.json'
      fs.writeFileSync(mapOutputFile, json);
    });
  });
}

function processFiles(prefix, suffix, fileCallback, cellsCallback) {
  var cells = [];
  var cell = null;
  glob(prefix + '*' + suffix, function(err, files) {
    if (err) throw err;
    files.sort();
    for (var i = 0; i < files.length; i++) {
      var file = files[i];
      var name = file.substring(prefix.length, file.length - suffix.length);
      var components = /^(\d+)_(\d+)([a-z]+)$/.exec(name);
      var x = components[1];
      var y = components[2];
      var d = components[3];

      if (cell === null) {
        cell = { x: x, y: y };
      }
      if (cell.x != x || cell.y != y) {
        cells.push(cell);
        cell = { x: x, y: y };
      }
      var direction = getDirection(d);
      if (direction === null) {
        throw new Error('Unknown direction: ' + d);
      }
      cell[direction] = name;

      fileCallback(file);
    }
    if (cell !== null) {
      cells.push(cell);
    }
    cellsCallback(cells);
  });
}

function getDirection(d) {
  if (d == 'n') return 'north';
  if (d == 'e') return 'east';
  if (d == 's') return 'south';
  if (d == 'w') return 'west';
  return null;
}
